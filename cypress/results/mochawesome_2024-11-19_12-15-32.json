{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-19T11:15:21.286Z",
    "end": "2024-11-19T11:15:32.996Z",
    "duration": 11710,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "91e47cfd-5e1e-414d-89ce-bb31e580ce87",
      "title": "",
      "fullFile": "cypress/e2e/end2end-flow.cy.ts",
      "file": "cypress/e2e/end2end-flow.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
          "title": "End-to-End Authentication and Dashboard Workflow",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully log in the user",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should successfully log in the user",
              "timedOut": null,
              "duration": 1943,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login(users.validUser.username, users.validUser.password);\ncy.url().should('include', '/dashboard'); // Ensure we are on the dashboard after login",
              "err": {},
              "uuid": "b63e1821-a5ce-4d00-a3d9-daef4db827ae",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show an error for invalid credentials",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should show an error for invalid credentials",
              "timedOut": null,
              "duration": 708,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login(users.invalidUser.username, users.invalidUser.password);\ncy.on('window:alert', function (text) {\n    expect(text).to.contains('Invalid PAT or Authentication Failed');\n});",
              "err": {},
              "uuid": "c0182da3-9585-4f5a-890a-8e8ca86fe3da",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show validation errors for empty fields",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should show validation errors for empty fields",
              "timedOut": null,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-cy=login-button]').should('be.disabled'); // Ensure button is disabled\ncy.get('[data-cy=username]').focus().blur(); // Trigger validation\ncy.get('[data-cy=password]').focus().blur();\ncy.contains('Username is required').should('be.visible');\ncy.contains('Personal Access Token is required').should('be.visible');",
              "err": {},
              "uuid": "fc86bff1-16f2-400e-b574-091465d715f7",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate token format and show error for invalid token",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should validate token format and show error for invalid token",
              "timedOut": null,
              "duration": 716,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-cy=username]').type(users.invalidUser.username);\ncy.get('[data-cy=password]').type('invalid_token_format');\ncy.get('[data-cy=login-button]').click();\ncy.on('window:alert', function (text) {\n    expect(text).to.contains('Invalid PAT or Authentication Failed');\n});",
              "err": {},
              "uuid": "521a5223-ed29-4c65-864c-ab9795f90fa2",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should keep the user logged in after refreshing the page",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should keep the user logged in after refreshing the page",
              "timedOut": null,
              "duration": 1413,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login(users.validUser.username, users.validUser.password);\ncy.url().should('include', '/dashboard');\ncy.reload();\ncy.url().should('include', '/dashboard'); // Check that the dashboard is still visible after refresh",
              "err": {},
              "uuid": "be42eadd-d37b-4fa7-8877-a468c132fc77",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the input fields for missing or invalid tokens",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should validate the input fields for missing or invalid tokens",
              "timedOut": null,
              "duration": 732,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Ensure the login button is disabled initially when the fields are empty\ncy.get('[data-cy=login-button]').should('be.disabled');\n// Check for empty field validation for the username\ncy.get('[data-cy=username]').focus().blur();\ncy.contains('Username is required').should('be.visible');\n// Check for empty field validation for the password\ncy.get('[data-cy=password]').focus().blur();\ncy.contains('Personal Access Token is required').should('be.visible');\n// Ensure the login button is still disabled after empty field validation\ncy.get('[data-cy=login-button]').should('be.disabled');\n// Check for invalid token format (enter username, invalid token, and submit)\ncy.get('[data-cy=username]').type(users.validUser.username);\ncy.get('[data-cy=password]').type('invalid_token'); // Invalid token format\ncy.get('[data-cy=login-button]').click();\n// Check for the alert showing the invalid token message\ncy.on('window:alert', function (str) {\n    expect(str).to.equal('Invalid PAT or Authentication Failed');\n});",
              "err": {},
              "uuid": "606f5057-5694-4179-90fa-56cc35fb989a",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ensure required components are visible on the dashboard",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should ensure required components are visible on the dashboard",
              "timedOut": null,
              "duration": 1510,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login(users.validUser.username, users.validUser.password);\ncy.url().should('include', '/dashboard');\n// Check if header and footer are visible\ncy.get('app-header').should('be.visible');\ncy.get('app-footer').should('be.visible');\n// Ensure that the summary tile is displayed\ncy.get('app-summary-tile').should('be.visible');\ncy.get('app-summary-tile').within(function () {\n    cy.contains('Projects').should('be.visible');\n    cy.contains('Total Commits this year').should('be.visible');\n    cy.contains('Followers').should('be.visible');\n    cy.contains('Following').should('be.visible');\n});\n// Ensure that the commit frequency chart is displayed\ncy.get('app-commit-frequency-chart').should('be.visible');\ncy.get('app-commit-frequency-chart').within(function () {\n    cy.contains('Commit count').should('be.visible');\n});\n// Ensure that the languages used chart is displayed\ncy.get('app-languages-used-chart').should('be.visible');\ncy.get('app-languages-used-chart').within(function () {\n    cy.contains('Programming languages').should('be.visible');\n});",
              "err": {},
              "uuid": "a538eea2-fe96-4930-aac7-50dbfb1f4041",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate to GitHub commit page when clicking on a commit",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should navigate to GitHub commit page when clicking on a commit",
              "timedOut": null,
              "duration": 1791,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Intercept the commits API request to mock the response\ncy.fixture('commitsResponse.json').then(function (commitsResponse) {\n    // Remove any circular references in the fixture data before mocking\n    var cleanedResponse = removeCircularReferences(commitsResponse);\n    cy.intercept('GET', 'https://api.github.com/repos/sreeraj-r-nair/solution-frontend-task/commits', {\n        statusCode: 200,\n        body: cleanedResponse\n    }).as('getCommits'); // Intercept and alias the request\n});\n// Login and visit the dashboard page\ncy.login(users.validUser.username, users.validUser.password);\ncy.url().should('include', '/dashboard');\n// Navigate to the commit list page\ncy.visit('/commit-list');\n// Wait for the intercepted API request to complete\ncy.wait('@getCommits');\n// Ensure the commit cards are visible\ncy.get('[data-cy=\"commit-message-0\"]').should('be.visible');\ncy.get('[data-cy=\"commit-message-1\"]').should('be.visible');\ncy.get('[data-cy=\"commit-message-2\"]').should('be.visible'); // Ensure third commit is visible\n// Click on the third commit (index 2)\ncy.get('[data-cy=\"commit-message-2\"]').click();\n// Verify that the new tab with the commit details URL is opened\ncy.window().then(function (win) {\n    cy.stub(win, 'open').as('windowOpen');\n});\ncy.get('[data-cy=\"commit-message-2\"]').click();\ncy.get('@windowOpen').should('be.calledWith', 'https://github.com/sreeraj-r-nair/solution-frontend-task/commit/403029c08accb948d8de298cbfbf114417e38505');",
              "err": {},
              "uuid": "8dc6640d-24bc-41bb-a71b-4478d1584c3e",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter commits based on search query",
              "fullTitle": "End-to-End Authentication and Dashboard Workflow should filter commits based on search query",
              "timedOut": null,
              "duration": 2629,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Intercept the commits API request to mock the response\ncy.fixture('commitsResponse.json').then(function (commitsResponse) {\n    // Remove any circular references in the fixture data before mocking\n    var cleanedResponse = removeCircularReferences(commitsResponse);\n    cy.intercept('GET', 'https://api.github.com/repos/sreeraj-r-nair/solution-frontend-task/commits', {\n        statusCode: 200,\n        body: cleanedResponse\n    }).as('getCommits'); // Intercept and alias the request\n});\n// Login and visit the dashboard page\ncy.login(users.validUser.username, users.validUser.password);\ncy.url().should('include', '/dashboard');\n// Navigate to the commit list page\ncy.visit('/commit-list');\n// Wait for the intercepted API request to complete\ncy.wait('@getCommits');\n// Ensure the commit cards are visible\ncy.get('[data-cy=\"commit-message-0\"]').should('be.visible');\ncy.get('[data-cy=\"commit-message-1\"]').should('be.visible');\ncy.get('[data-cy=\"commit-message-2\"]').should('be.visible'); // Ensure third commit is visible\n// Test search functionality\n// Type a search query in the search bar\ncy.get('[data-cy=\"commit-search-bar\"]').type('rollback');\n// Ensure the filtered commits are visible after typing the search query\ncy.get('[data-cy=\"commit-message-0\"]').should('contain', 'rollback');\n// You can add more assertions to ensure that the list is filtered properly\ncy.get('[data-cy=\"commit-message-3\"]').should('not.exist');\n// Optionally, clear the search input and ensure that all commits are visible again\ncy.get('[data-cy=\"commit-search-bar\"]').clear();\ncy.get('[data-cy=\"commit-message-0\"]').should('be.visible');\ncy.get('[data-cy=\"commit-message-1\"]').should('be.visible');\ncy.get('[data-cy=\"commit-message-2\"]').should('be.visible');",
              "err": {},
              "uuid": "b5fd6388-0e76-41b8-979f-b1b3cf51d161",
              "parentUUID": "26516184-a2b9-46e7-bf58-a92dc12e0cc9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b63e1821-a5ce-4d00-a3d9-daef4db827ae",
            "c0182da3-9585-4f5a-890a-8e8ca86fe3da",
            "fc86bff1-16f2-400e-b574-091465d715f7",
            "521a5223-ed29-4c65-864c-ab9795f90fa2",
            "be42eadd-d37b-4fa7-8877-a468c132fc77",
            "606f5057-5694-4179-90fa-56cc35fb989a",
            "a538eea2-fe96-4930-aac7-50dbfb1f4041",
            "8dc6640d-24bc-41bb-a71b-4478d1584c3e",
            "b5fd6388-0e76-41b8-979f-b1b3cf51d161"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11525,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "yyyy-mm-dd_HH-MM-ss"
      },
      "version": "6.2.0"
    }
  }
}